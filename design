; The 'maiz' 2D pattern language 
; comprises a set of operators which coordinate the
; movement of the "pointer" or "read head" of the
; pattern-matching machine.

; Each connective has a 4-cell view of the world.
; ..
; ..

; And from the starting point identified here as s,
; s.
; ..

; each connective selects various other cells from
; which to spawn a recursive invocation of the 
; machine.

; The target(s) of each connective are identified here by
; their order in the syntax. The number of targets is
; the connective's arity, and that number of connectives
; must immediately follow in that order in the source.
; a   i   j   r   c   n   m   z
; s1  s.  s.  s1  s1  s.  s1  s.
; ..  1.  .1  2.  .2  21  32  ..  where z is the "zero" target
;                                 which has no further branches.

; So 'a' simply moves to the right.
;    'i' moves down.
;    'j' moves diagonally.
;    'r' branches right then down.
;    'c' branches right then diagonally.
;    'n' branches diagonally then down.
;    'm' branches right then diagonally then down.

; To build a machine, each connective must be paired with 
; a character-class designator for which we'll use the natural
; numbers.

; Source-lines beginning with a digit are considered
; to define the character-class associated with the first
; number that can be parsed. If the number is followed by
; a whitespace character, exactly one whitespace character
; will be discarded, but the remaining characters of the
; line constitute the definition of the class.

0 #
1 _

; Source-lines beginning with a letter construct a
; pattern-matching network, a "machine".
; Whitespace within the machine definition is completely
; irrelevant. The only significant elements are the 
; numbers and connective-letters.

; Since connectives are paired with digits, it 
; has been found convenient to keep them juxtaposed.

; This machine with the character-classes defined above
; matches a chessboard design.
r0 a1 z0
r1 a0 z1
a0 a1 z0

; It can also be written so as to emphasize the nesting
; of control, the "tree-structure" of the connectives.
; This machine matches the inverse chessboard design,
; with the same tree-shape as the previous.
r1
    a0
        z1
    r0
        a1
            z0
        a1
            a0
                z1

; Additional "meta-connectives" apply closures upon 
; portions of the tree. These are not paired with a 
; character class designator.
; q         x
; regex ?   regex *

; So, the above machine could be augmented to match
; an optional extra row, by applying q to the possible
; row.
 r0 a1 z0
 r1 a0 z1
 r0 a1 z0
qa1 a0 z1

; Or, it could be augmented to match an optional extra
; column.
 r0 a1 a0 qi1 i0 z1
 r1 a0 z1
 a0 a1 z0

; One unsolved difficulty is coordinating the two to also
; match an extra bottom-corner if both an extra column and an
; extra row are discovered. One could put an optional 
; diagonal at the corner, but still, it needs something else.
 r0 a1 a0 qi1 i0 z1
 r1 a0 z1
 r0 a1 j0 qz0
qa1 a0 z1

; Another idea is to use negative numbers to perform a 
; capture. But the straightforward implementation of this
; would simply overwrite the existing class (so it'd be
; single-use, I fear).

; Another idea is to use uppercase letters as sort of "macros".
; So, for the extending chessboard,

A qr1 D
   i0
   z1

D qr0 A
   i1
   z0

B qz0

C qr1 a0 z1 E
E qr0 a1 z0 C
 
r0 a1 a0 A
r1 a0 z1
r0 a1 j0 B
C

; So now another tricky part arises. If A or D is matched,
; then C and E need to be lengthed accordingly. 
; Or, some means of expanding B into a square, which seems
; to reduce to the same thing.
; We'll need the ability to patch or augment a defined
; machine. 

; Also the references to D in A and to E in C will need to 
; be back-patched after their definitions or looked-up
; dynamically (just store symbolic links).

; The machines are built with pointers, so the data structure
; should naturally handle recursively defined machines.
; The trick will be executing them reasonably, taking advantage
; of the optional connectives for breaking the recursion.

; But, if the machines have recursive links, then we can't 
; reuse the machine structure as the return structure for
; returning the matched block of chars. The match data will
; need a different structure, guided by the shape of the 
; machine, but with unrolled links, ie. self-contained. 

; Incidentally, this syntax is called *fixed-arity,
; unparenthesized, forward-Polish.*

; We seem to need a separate imperative language that can
; perform arbitrary computations.

; Operations on a tree are effected by traversing its list
; representation. So, considering the same example from
; above,

; The q operators seem to be a natural place to add a
; code fragment, since they're not paired with a char-class.
; At first blush, the punctuation symbols are ripe for
; exploitation. And how about reverse-polish this time:
; maximum-imperative.

; So, the q in A, if it matches, needs to add an element
; to each of C and E. And D needs to do the same.
; C is a tree:

C q
    r1
        a0
            z1
        E

; which needs to be changed to:

C q
    r1
        a0
            a1
                z0
        E

; If we start at the q node, we need to move 
; "right" to the first child r, right again to the
; second child a0, right again to the z1, and then
; replace z1 with a1z0.

; First command is the macro letter which loads the machine.
; Then, right right right, new node(s), set. Bingo!

A q{C>>>a1z0=}r1 D
   i0
   z1

D q{E>>>a0z1=}r0 A
   i1
   z0

; mach  >  mach     move to the "right" node from this node
; mach node  =  -   replace the machine node with new node(s)

C qr1 a0 z1 E
E qr0 a1 z0 C

r0 a1 a0 A
r1 a0 z1
r0 a1 j0 B
C

B qz0


; Source-lines beginning with a semicolon are considered
; comments and discarded by the interpreter.

